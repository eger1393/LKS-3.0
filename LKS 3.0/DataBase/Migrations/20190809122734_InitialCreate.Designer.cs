// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190809122734_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Models.ACRISFlight", b =>
                {
                    b.Property<string>("ACRISFlightID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("aircrafTypeaircraftTypeID");

                    b.Property<string>("arrivalAirport");

                    b.Property<string>("arrivalID");

                    b.Property<string>("codeSharesID");

                    b.Property<string>("departureAirport");

                    b.Property<string>("departureID");

                    b.Property<string>("flightNumberID");

                    b.Property<string>("flightStatus");

                    b.Property<string>("operatingAirlineID");

                    b.Property<DateTime>("originDate");

                    b.Property<string>("viaID");

                    b.HasKey("ACRISFlightID");

                    b.HasIndex("aircrafTypeaircraftTypeID");

                    b.HasIndex("arrivalID");

                    b.HasIndex("codeSharesID");

                    b.HasIndex("departureID");

                    b.HasIndex("flightNumberID");

                    b.HasIndex("operatingAirlineID");

                    b.HasIndex("viaID");

                    b.ToTable("ACRISFlights");
                });

            modelBuilder.Entity("DataBase.Models.AircraftType", b =>
                {
                    b.Property<string>("aircraftTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("icaoCode");

                    b.Property<string>("modelName");

                    b.Property<string>("registration");

                    b.HasKey("aircraftTypeID");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("DataBase.Models.Airline", b =>
                {
                    b.Property<string>("airlineID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("airlineContact1");

                    b.Property<string>("airlineName");

                    b.Property<string>("checkIn");

                    b.Property<string>("checkInTime");

                    b.Property<string>("email");

                    b.Property<string>("faxNumber");

                    b.Property<string>("flightNumberCode");

                    b.Property<string>("handlingAgent");

                    b.Property<string>("iataCode");

                    b.Property<string>("icaoCode");

                    b.Property<string>("info");

                    b.Property<string>("lateNightArea");

                    b.Property<string>("lateNightTimes");

                    b.Property<string>("onlineCheckInURL");

                    b.Property<string>("serviceTime");

                    b.Property<string>("telephoneNumber");

                    b.Property<string>("terminal");

                    b.HasKey("airlineID");

                    b.HasIndex("airlineContact1");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("DataBase.Models.AirlineContact", b =>
                {
                    b.Property<string>("airlineContact")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("country_name");

                    b.Property<string>("country_tag");

                    b.Property<string>("extended_address");

                    b.Property<string>("locality");

                    b.Property<string>("post_office_box");

                    b.Property<string>("postal_code");

                    b.Property<string>("region");

                    b.Property<string>("street_address");

                    b.HasKey("airlineContact");

                    b.ToTable("AirlineContacts");
                });

            modelBuilder.Entity("DataBase.Models.Airport", b =>
                {
                    b.Property<string>("airportID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("airportImageURLID");

                    b.Property<string>("airportName");

                    b.Property<string>("bmezone");

                    b.Property<string>("cityName");

                    b.Property<string>("coordinateairportCoordinateID");

                    b.Property<string>("countryairportCountryID");

                    b.Property<string>("currentQueueTimesairportCurrentQueueTimesID");

                    b.Property<string>("forecastQueueTimesairportForecastQueueTimesID");

                    b.Property<double>("geofenceRadius");

                    b.Property<string>("iataCode");

                    b.Property<string>("icaoCode");

                    b.Property<string>("postalAddressairportPostalAddressID");

                    b.Property<string>("vasitorsAddressairportVisitorsAddressID");

                    b.HasKey("airportID");

                    b.HasIndex("airportImageURLID");

                    b.HasIndex("coordinateairportCoordinateID");

                    b.HasIndex("countryairportCountryID");

                    b.HasIndex("currentQueueTimesairportCurrentQueueTimesID");

                    b.HasIndex("forecastQueueTimesairportForecastQueueTimesID");

                    b.HasIndex("postalAddressairportPostalAddressID");

                    b.HasIndex("vasitorsAddressairportVisitorsAddressID");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("DataBase.Models.AirportCoordinate", b =>
                {
                    b.Property<string>("airportCoordinateID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("elevation");

                    b.Property<double>("latitude");

                    b.Property<double>("lonqitude");

                    b.HasKey("airportCoordinateID");

                    b.ToTable("AirportCoordinates");
                });

            modelBuilder.Entity("DataBase.Models.AirportCountry", b =>
                {
                    b.Property<string>("airportCountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("countryName");

                    b.HasKey("airportCountryID");

                    b.ToTable("AirportCountries");
                });

            modelBuilder.Entity("DataBase.Models.AirportCurrentQueueTimes", b =>
                {
                    b.Property<string>("airportCurrentQueueTimesID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("currentProjectedMaxWaitTime");

                    b.Property<int>("currentProjectedMinWaitTime");

                    b.Property<int>("currentProjectedWaitTime");

                    b.Property<string>("currentQueueName");

                    b.Property<string>("currentTime");

                    b.HasKey("airportCurrentQueueTimesID");

                    b.ToTable("AirportCurrentQueueTimes");
                });

            modelBuilder.Entity("DataBase.Models.AirportForecastQueueTimes", b =>
                {
                    b.Property<string>("airportForecastQueueTimesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("currentQueueName");

                    b.Property<string>("currentTime");

                    b.Property<int>("forecastConfidence");

                    b.Property<int>("forecastProjectedWaitTime");

                    b.HasKey("airportForecastQueueTimesID");

                    b.ToTable("AirportForecastQueueTimes");
                });

            modelBuilder.Entity("DataBase.Models.AirportImageURL", b =>
                {
                    b.Property<string>("airportImageURLID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("high");

                    b.Property<string>("low");

                    b.Property<string>("medium");

                    b.Property<string>("native");

                    b.HasKey("airportImageURLID");

                    b.ToTable("AirportImageURL");
                });

            modelBuilder.Entity("DataBase.Models.AirportPostalAddress", b =>
                {
                    b.Property<string>("airportPostalAddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("country_name");

                    b.Property<string>("country_tag");

                    b.Property<string>("extended_address");

                    b.Property<string>("locality");

                    b.Property<string>("post_office_box");

                    b.Property<string>("postal_code");

                    b.Property<string>("region");

                    b.Property<string>("street_address");

                    b.HasKey("airportPostalAddressID");

                    b.ToTable("AirportPostalAddresses");
                });

            modelBuilder.Entity("DataBase.Models.AirportVisitorsAddress", b =>
                {
                    b.Property<string>("airportVisitorsAddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("country_name");

                    b.Property<string>("country_tag");

                    b.Property<string>("extended_address");

                    b.Property<string>("locality");

                    b.Property<string>("post_office_box");

                    b.Property<string>("postal_code");

                    b.Property<string>("region");

                    b.Property<string>("street_address");

                    b.HasKey("airportVisitorsAddressID");

                    b.ToTable("AirportVisitorsAddresses");
                });

            modelBuilder.Entity("DataBase.Models.Arrival", b =>
                {
                    b.Property<string>("arrivalID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("actual");

                    b.Property<string>("baggaageClaimbaggageClaimID");

                    b.Property<DateTime>("estimated");

                    b.Property<string>("gate");

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("termnal");

                    b.Property<string>("transferInformation");

                    b.HasKey("arrivalID");

                    b.HasIndex("baggaageClaimbaggageClaimID");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("DataBase.Models.BaggageClaim", b =>
                {
                    b.Property<string>("baggageClaimID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("carousel");

                    b.Property<DateTime>("expectedTimeOnCarousel");

                    b.HasKey("baggageClaimID");

                    b.ToTable("BaggageClaims");
                });

            modelBuilder.Entity("DataBase.Models.BoardingTime", b =>
                {
                    b.Property<string>("boardingTimeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bookingClass");

                    b.Property<DateTime>("time");

                    b.HasKey("boardingTimeID");

                    b.ToTable("BoardingTimes");
                });

            modelBuilder.Entity("DataBase.Models.BookService", b =>
                {
                    b.Property<string>("bookServiceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("serviceHeaderID");

                    b.HasKey("bookServiceID");

                    b.HasIndex("serviceHeaderID");

                    b.ToTable("BookServices");
                });

            modelBuilder.Entity("DataBase.Models.CheckInInfo", b =>
                {
                    b.Property<string>("checkInInfoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalInfo");

                    b.Property<DateTime>("checkInBeginTime");

                    b.Property<DateTime>("checkInEndTime");

                    b.Property<string>("checkInLocation");

                    b.HasKey("checkInInfoID");

                    b.ToTable("CheckInInfos");
                });

            modelBuilder.Entity("DataBase.Models.CodeShares", b =>
                {
                    b.Property<string>("codeSharesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("airlineCode");

                    b.Property<string>("suffix");

                    b.Property<string>("trackNumber");

                    b.HasKey("codeSharesID");

                    b.ToTable("CodeShares");
                });

            modelBuilder.Entity("DataBase.Models.Departure", b =>
                {
                    b.Property<string>("departureID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("actual");

                    b.Property<string>("boardingTimeID");

                    b.Property<string>("checkInInfoID");

                    b.Property<DateTime>("estimated");

                    b.Property<string>("gate");

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("terminal");

                    b.HasKey("departureID");

                    b.HasIndex("boardingTimeID");

                    b.HasIndex("checkInInfoID");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("DataBase.Models.FlightNumber", b =>
                {
                    b.Property<string>("flightNumberID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("airlineCode");

                    b.Property<string>("suffix");

                    b.Property<string>("trackNumber");

                    b.HasKey("flightNumberID");

                    b.ToTable("FlightNumbers");
                });

            modelBuilder.Entity("DataBase.Models.Image", b =>
                {
                    b.Property<string>("imageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("high");

                    b.Property<string>("low");

                    b.Property<string>("medium");

                    b.Property<string>("native");

                    b.HasKey("imageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataBase.Models.Logo", b =>
                {
                    b.Property<string>("logoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("logo_high");

                    b.Property<string>("logo_low");

                    b.Property<string>("logo_medium");

                    b.Property<string>("logo_native");

                    b.HasKey("logoID");

                    b.ToTable("Logo");
                });

            modelBuilder.Entity("DataBase.Models.OpeningHour", b =>
                {
                    b.Property<string>("openingHourID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("column1");

                    b.Property<string>("column2");

                    b.Property<string>("serviceLocationsID");

                    b.HasKey("openingHourID");

                    b.HasIndex("serviceLocationsID");

                    b.ToTable("OpeningHour");
                });

            modelBuilder.Entity("DataBase.Models.OperatingAirline", b =>
                {
                    b.Property<string>("operatingAirlineID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("iataCode");

                    b.Property<string>("icaoCode");

                    b.Property<string>("name");

                    b.HasKey("operatingAirlineID");

                    b.ToTable("OperatingAirlines");
                });

            modelBuilder.Entity("DataBase.Models.Provider", b =>
                {
                    b.Property<string>("providerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("contactproviderContactID");

                    b.Property<string>("email");

                    b.Property<string>("fax");

                    b.Property<string>("logoID");

                    b.Property<string>("name");

                    b.Property<string>("phone");

                    b.Property<string>("website");

                    b.HasKey("providerID");

                    b.HasIndex("contactproviderContactID");

                    b.HasIndex("logoID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("DataBase.Models.ProviderContact", b =>
                {
                    b.Property<string>("providerContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("country_name");

                    b.Property<string>("country_tag");

                    b.Property<string>("extended_address");

                    b.Property<string>("locality");

                    b.Property<string>("post_office_box");

                    b.Property<string>("postal_code");

                    b.Property<string>("region");

                    b.Property<string>("street_address");

                    b.HasKey("providerContactID");

                    b.ToTable("ProviderContacts");
                });

            modelBuilder.Entity("DataBase.Models.Service", b =>
                {
                    b.Property<string>("serviceID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("serviceProviderproviderID");

                    b.Property<string>("specialsID");

                    b.HasKey("serviceID");

                    b.HasIndex("serviceProviderproviderID");

                    b.HasIndex("specialsID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataBase.Models.ServiceDonwload", b =>
                {
                    b.Property<string>("serviceDonwloadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("serviceID");

                    b.Property<string>("value");

                    b.HasKey("serviceDonwloadID");

                    b.HasIndex("serviceID");

                    b.ToTable("ServiceDonwloads");
                });

            modelBuilder.Entity("DataBase.Models.ServiceElements", b =>
                {
                    b.Property<string>("serviceElementsID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("value");

                    b.HasKey("serviceElementsID");

                    b.ToTable("ServiceElements");
                });

            modelBuilder.Entity("DataBase.Models.ServiceHeader", b =>
                {
                    b.Property<string>("serviceHeaderID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bookingID");

                    b.Property<string>("description");

                    b.Property<string>("extBookingID");

                    b.Property<string>("serviceID");

                    b.HasKey("serviceHeaderID");

                    b.ToTable("ServiceHeaders");
                });

            modelBuilder.Entity("DataBase.Models.ServiceItem", b =>
                {
                    b.Property<string>("serviceItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("description");

                    b.Property<bool>("isBookable");

                    b.Property<string>("shortDescription");

                    b.Property<string>("subTitle");

                    b.Property<string>("title");

                    b.HasKey("serviceItemID");

                    b.ToTable("ServiceItems");
                });

            modelBuilder.Entity("DataBase.Models.ServiceLocations", b =>
                {
                    b.Property<string>("serviceLocationsID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("area");

                    b.Property<string>("description");

                    b.Property<string>("humanReadable");

                    b.Property<string>("mapImageimageID");

                    b.Property<int>("x");

                    b.Property<int>("y");

                    b.Property<int>("z");

                    b.HasKey("serviceLocationsID");

                    b.HasIndex("mapImageimageID");

                    b.ToTable("ServiceLocations");
                });

            modelBuilder.Entity("DataBase.Models.Specials", b =>
                {
                    b.Property<string>("specialsID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("begin");

                    b.Property<string>("coupon");

                    b.Property<string>("description");

                    b.Property<DateTime>("end");

                    b.Property<string>("imageID");

                    b.Property<string>("name");

                    b.Property<int>("numberOfAvailable");

                    b.HasKey("specialsID");

                    b.HasIndex("imageID");

                    b.ToTable("Specials");
                });

            modelBuilder.Entity("DataBase.Models.Trip", b =>
                {
                    b.Property<string>("tripID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("endDate");

                    b.Property<string>("flights");

                    b.Property<string>("name");

                    b.Property<string>("role");

                    b.Property<string>("servicestripServicesID");

                    b.Property<DateTime>("startDate");

                    b.HasKey("tripID");

                    b.HasIndex("servicestripServicesID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("DataBase.Models.TripServices", b =>
                {
                    b.Property<string>("tripServicesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bookingID");

                    b.Property<string>("serviceID");

                    b.Property<string>("source");

                    b.HasKey("tripServicesID");

                    b.ToTable("TripServices");
                });

            modelBuilder.Entity("DataBase.Models.Via", b =>
                {
                    b.Property<string>("viaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("arrivalviaArrivalID");

                    b.Property<string>("departureviaDepartureID");

                    b.Property<string>("viaAirport");

                    b.HasKey("viaID");

                    b.HasIndex("arrivalviaArrivalID");

                    b.HasIndex("departureviaDepartureID");

                    b.ToTable("Vias");
                });

            modelBuilder.Entity("DataBase.Models.ViaArrival", b =>
                {
                    b.Property<string>("viaArrivalID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("actual");

                    b.Property<string>("baggaageClaimviaBaggageClaimID");

                    b.Property<DateTime>("estimated");

                    b.Property<string>("gate");

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("termnal");

                    b.Property<string>("transferInformation");

                    b.HasKey("viaArrivalID");

                    b.HasIndex("baggaageClaimviaBaggageClaimID");

                    b.ToTable("ViaArrivals");
                });

            modelBuilder.Entity("DataBase.Models.ViaBaggageClaim", b =>
                {
                    b.Property<string>("viaBaggageClaimID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("carousel");

                    b.Property<DateTime>("expectedTimeOnCarousel");

                    b.HasKey("viaBaggageClaimID");

                    b.ToTable("ViaBaggageClaims");
                });

            modelBuilder.Entity("DataBase.Models.ViaBoardingTime", b =>
                {
                    b.Property<string>("viaBoardingTimeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("bookingClass");

                    b.Property<DateTime>("time");

                    b.HasKey("viaBoardingTimeID");

                    b.ToTable("ViaBoardingTimes");
                });

            modelBuilder.Entity("DataBase.Models.ViaCheckInInfo", b =>
                {
                    b.Property<string>("viaCheckInInfoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalInfo");

                    b.Property<DateTime>("checkInBeginTime");

                    b.Property<DateTime>("checkInEndTime");

                    b.Property<string>("checkInLocation");

                    b.HasKey("viaCheckInInfoID");

                    b.ToTable("ViaCheckInInfos");
                });

            modelBuilder.Entity("DataBase.Models.ViaDeparture", b =>
                {
                    b.Property<string>("viaDepartureID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("actual");

                    b.Property<string>("boardingTimeviaBoardingTimeID");

                    b.Property<string>("checkInInfoviaCheckInInfoID");

                    b.Property<DateTime>("estimated");

                    b.Property<string>("gate");

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("terminal");

                    b.HasKey("viaDepartureID");

                    b.HasIndex("boardingTimeviaBoardingTimeID");

                    b.HasIndex("checkInInfoviaCheckInInfoID");

                    b.ToTable("ViaDepartures");
                });

            modelBuilder.Entity("DataBase.Models.ACRISFlight", b =>
                {
                    b.HasOne("DataBase.Models.AircraftType", "aircrafType")
                        .WithMany()
                        .HasForeignKey("aircrafTypeaircraftTypeID");

                    b.HasOne("DataBase.Models.Arrival", "arrival")
                        .WithMany()
                        .HasForeignKey("arrivalID");

                    b.HasOne("DataBase.Models.CodeShares", "codeShares")
                        .WithMany()
                        .HasForeignKey("codeSharesID");

                    b.HasOne("DataBase.Models.Departure", "departure")
                        .WithMany()
                        .HasForeignKey("departureID");

                    b.HasOne("DataBase.Models.FlightNumber", "flightNumber")
                        .WithMany()
                        .HasForeignKey("flightNumberID");

                    b.HasOne("DataBase.Models.OperatingAirline", "operatingAirline")
                        .WithMany()
                        .HasForeignKey("operatingAirlineID");

                    b.HasOne("DataBase.Models.Via", "via")
                        .WithMany()
                        .HasForeignKey("viaID");
                });

            modelBuilder.Entity("DataBase.Models.Airline", b =>
                {
                    b.HasOne("DataBase.Models.AirlineContact", "airlineContact")
                        .WithMany()
                        .HasForeignKey("airlineContact1");
                });

            modelBuilder.Entity("DataBase.Models.Airport", b =>
                {
                    b.HasOne("DataBase.Models.AirportImageURL", "airportImageURL")
                        .WithMany()
                        .HasForeignKey("airportImageURLID");

                    b.HasOne("DataBase.Models.AirportCoordinate", "coordinate")
                        .WithMany()
                        .HasForeignKey("coordinateairportCoordinateID");

                    b.HasOne("DataBase.Models.AirportCountry", "country")
                        .WithMany()
                        .HasForeignKey("countryairportCountryID");

                    b.HasOne("DataBase.Models.AirportCurrentQueueTimes", "currentQueueTimes")
                        .WithMany()
                        .HasForeignKey("currentQueueTimesairportCurrentQueueTimesID");

                    b.HasOne("DataBase.Models.AirportForecastQueueTimes", "forecastQueueTimes")
                        .WithMany()
                        .HasForeignKey("forecastQueueTimesairportForecastQueueTimesID");

                    b.HasOne("DataBase.Models.AirportPostalAddress", "postalAddress")
                        .WithMany()
                        .HasForeignKey("postalAddressairportPostalAddressID");

                    b.HasOne("DataBase.Models.AirportVisitorsAddress", "vasitorsAddress")
                        .WithMany()
                        .HasForeignKey("vasitorsAddressairportVisitorsAddressID");
                });

            modelBuilder.Entity("DataBase.Models.Arrival", b =>
                {
                    b.HasOne("DataBase.Models.BaggageClaim", "baggaageClaim")
                        .WithMany()
                        .HasForeignKey("baggaageClaimbaggageClaimID");
                });

            modelBuilder.Entity("DataBase.Models.BookService", b =>
                {
                    b.HasOne("DataBase.Models.ServiceHeader", "serviceHeader")
                        .WithMany()
                        .HasForeignKey("serviceHeaderID");
                });

            modelBuilder.Entity("DataBase.Models.Departure", b =>
                {
                    b.HasOne("DataBase.Models.BoardingTime", "boardingTime")
                        .WithMany()
                        .HasForeignKey("boardingTimeID");

                    b.HasOne("DataBase.Models.CheckInInfo", "checkInInfo")
                        .WithMany()
                        .HasForeignKey("checkInInfoID");
                });

            modelBuilder.Entity("DataBase.Models.OpeningHour", b =>
                {
                    b.HasOne("DataBase.Models.ServiceLocations")
                        .WithMany("openingHource")
                        .HasForeignKey("serviceLocationsID");
                });

            modelBuilder.Entity("DataBase.Models.Provider", b =>
                {
                    b.HasOne("DataBase.Models.ProviderContact", "contact")
                        .WithMany()
                        .HasForeignKey("contactproviderContactID");

                    b.HasOne("DataBase.Models.Logo", "logo")
                        .WithMany()
                        .HasForeignKey("logoID");
                });

            modelBuilder.Entity("DataBase.Models.Service", b =>
                {
                    b.HasOne("DataBase.Models.Provider", "serviceProvider")
                        .WithMany()
                        .HasForeignKey("serviceProviderproviderID");

                    b.HasOne("DataBase.Models.Specials", "specials")
                        .WithMany()
                        .HasForeignKey("specialsID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceDonwload", b =>
                {
                    b.HasOne("DataBase.Models.Service")
                        .WithMany("serviceDonwloads")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceLocations", b =>
                {
                    b.HasOne("DataBase.Models.Image", "mapImage")
                        .WithMany()
                        .HasForeignKey("mapImageimageID");
                });

            modelBuilder.Entity("DataBase.Models.Specials", b =>
                {
                    b.HasOne("DataBase.Models.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageID");
                });

            modelBuilder.Entity("DataBase.Models.Trip", b =>
                {
                    b.HasOne("DataBase.Models.TripServices", "services")
                        .WithMany()
                        .HasForeignKey("servicestripServicesID");
                });

            modelBuilder.Entity("DataBase.Models.Via", b =>
                {
                    b.HasOne("DataBase.Models.ViaArrival", "arrival")
                        .WithMany()
                        .HasForeignKey("arrivalviaArrivalID");

                    b.HasOne("DataBase.Models.ViaDeparture", "departure")
                        .WithMany()
                        .HasForeignKey("departureviaDepartureID");
                });

            modelBuilder.Entity("DataBase.Models.ViaArrival", b =>
                {
                    b.HasOne("DataBase.Models.ViaBaggageClaim", "baggaageClaim")
                        .WithMany()
                        .HasForeignKey("baggaageClaimviaBaggageClaimID");
                });

            modelBuilder.Entity("DataBase.Models.ViaDeparture", b =>
                {
                    b.HasOne("DataBase.Models.ViaBoardingTime", "boardingTime")
                        .WithMany()
                        .HasForeignKey("boardingTimeviaBoardingTimeID");

                    b.HasOne("DataBase.Models.ViaCheckInInfo", "checkInInfo")
                        .WithMany()
                        .HasForeignKey("checkInInfoviaCheckInInfoID");
                });
#pragma warning restore 612, 618
        }
    }
}
