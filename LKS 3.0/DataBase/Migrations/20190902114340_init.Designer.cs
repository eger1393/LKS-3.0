// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190902114340_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Models.ACRISFlight", b =>
                {
                    b.Property<int>("ACRISFlightID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("aircrafTypeaircraftTypeID");

                    b.Property<string>("arrivalAirport")
                        .HasMaxLength(255);

                    b.Property<int?>("arrivalID");

                    b.Property<string>("departureAirport")
                        .HasMaxLength(255);

                    b.Property<int?>("departureID");

                    b.Property<int>("flightNumberID");

                    b.Property<string>("flightStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("operatingAirlineID");

                    b.Property<DateTime?>("originDate");

                    b.HasKey("ACRISFlightID");

                    b.HasIndex("aircrafTypeaircraftTypeID");

                    b.HasIndex("arrivalID");

                    b.HasIndex("departureID");

                    b.HasIndex("flightNumberID");

                    b.HasIndex("operatingAirlineID");

                    b.ToTable("ACRISFlights");
                });

            modelBuilder.Entity("DataBase.Models.AircraftType", b =>
                {
                    b.Property<int>("aircraftTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("icaoCode")
                        .HasMaxLength(10);

                    b.Property<string>("modelName")
                        .HasMaxLength(255);

                    b.Property<string>("registration")
                        .HasMaxLength(50);

                    b.HasKey("aircraftTypeID");

                    b.ToTable("AircraftTypes");
                });

            modelBuilder.Entity("DataBase.Models.Airline", b =>
                {
                    b.Property<int>("airlineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("airlineContactId");

                    b.Property<string>("airlineName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("checkIn")
                        .HasMaxLength(255);

                    b.Property<string>("checkInTime")
                        .HasMaxLength(50);

                    b.Property<string>("email")
                        .HasMaxLength(100);

                    b.Property<string>("faxNumber")
                        .HasMaxLength(50);

                    b.Property<string>("flightNumberCode")
                        .HasMaxLength(50);

                    b.Property<string>("handlingAgent")
                        .HasMaxLength(100);

                    b.Property<string>("iataCode")
                        .HasMaxLength(10);

                    b.Property<string>("icaoCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("info")
                        .HasMaxLength(255);

                    b.Property<string>("lateNightArea")
                        .HasMaxLength(255);

                    b.Property<string>("lateNightTimes")
                        .HasMaxLength(255);

                    b.Property<string>("onlineCheckInURL")
                        .HasMaxLength(255);

                    b.Property<string>("serviceTime")
                        .HasMaxLength(50);

                    b.Property<string>("telephoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("terminal")
                        .HasMaxLength(255);

                    b.HasKey("airlineID");

                    b.HasIndex("airlineContactId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("DataBase.Models.AirlineContact", b =>
                {
                    b.Property<int>("airlineContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("country_name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("country_tag")
                        .HasMaxLength(100);

                    b.Property<string>("extended_address");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("post_office_box")
                        .HasMaxLength(50);

                    b.Property<string>("postal_code")
                        .HasMaxLength(50);

                    b.Property<string>("region")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("street_address")
                        .HasMaxLength(255);

                    b.HasKey("airlineContactId");

                    b.ToTable("AirlineContacts");
                });

            modelBuilder.Entity("DataBase.Models.AirlineWebsite", b =>
                {
                    b.Property<int>("airlineWebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("airlineID");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("airlineWebsiteId");

                    b.HasIndex("airlineID");

                    b.ToTable("AirlineWebsite");
                });

            modelBuilder.Entity("DataBase.Models.Airport", b =>
                {
                    b.Property<int>("airportID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("airportImageURLID");

                    b.Property<string>("airportName")
                        .HasMaxLength(255);

                    b.Property<string>("cityName")
                        .HasMaxLength(255);

                    b.Property<int?>("coordinateairportCoordinateID");

                    b.Property<int?>("currentQueueTimesairportCurrentQueueTimesID");

                    b.Property<string>("email")
                        .HasMaxLength(50);

                    b.Property<int?>("forecastQueueTimesairportForecastQueueTimesID");

                    b.Property<double?>("geofenceRadius");

                    b.Property<string>("iataCode")
                        .HasMaxLength(10);

                    b.Property<string>("icaoCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("postalAddressairportPostalAddressID");

                    b.Property<string>("telephoneNumber")
                        .HasMaxLength(50);

                    b.Property<string>("timezone")
                        .HasMaxLength(50);

                    b.Property<int?>("vasitorsAddressairportVisitorsAddressID");

                    b.HasKey("airportID");

                    b.HasIndex("airportImageURLID");

                    b.HasIndex("coordinateairportCoordinateID");

                    b.HasIndex("currentQueueTimesairportCurrentQueueTimesID");

                    b.HasIndex("forecastQueueTimesairportForecastQueueTimesID");

                    b.HasIndex("postalAddressairportPostalAddressID");

                    b.HasIndex("vasitorsAddressairportVisitorsAddressID");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("DataBase.Models.AirportCoordinate", b =>
                {
                    b.Property<int>("airportCoordinateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("elevation");

                    b.Property<double>("latitude");

                    b.Property<double>("lonqitude");

                    b.HasKey("airportCoordinateID");

                    b.ToTable("AirportCoordinates");
                });

            modelBuilder.Entity("DataBase.Models.AirportCurrentQueueTimes", b =>
                {
                    b.Property<int?>("airportCurrentQueueTimesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("currentProjectedMaxWaitTime");

                    b.Property<int?>("currentProjectedMinWaitTime");

                    b.Property<int?>("currentProjectedWaitTime");

                    b.Property<string>("currentQueueName")
                        .HasMaxLength(255);

                    b.Property<string>("currentTime")
                        .HasMaxLength(50);

                    b.HasKey("airportCurrentQueueTimesID");

                    b.ToTable("AirportCurrentQueueTimes");
                });

            modelBuilder.Entity("DataBase.Models.AirportForecastQueueTimes", b =>
                {
                    b.Property<int>("airportForecastQueueTimesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("currentQueueName")
                        .HasMaxLength(255);

                    b.Property<string>("currentTime")
                        .HasMaxLength(50);

                    b.Property<int?>("forecastConfidence");

                    b.Property<int?>("forecastProjectedWaitTime");

                    b.HasKey("airportForecastQueueTimesID");

                    b.ToTable("AirportForecastQueueTimes");
                });

            modelBuilder.Entity("DataBase.Models.AirportImageURL", b =>
                {
                    b.Property<int>("airportImageURLID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("high")
                        .HasMaxLength(20);

                    b.Property<string>("low")
                        .HasMaxLength(20);

                    b.Property<string>("medium")
                        .HasMaxLength(20);

                    b.Property<string>("native")
                        .HasMaxLength(20);

                    b.HasKey("airportImageURLID");

                    b.ToTable("AirportImageURL");
                });

            modelBuilder.Entity("DataBase.Models.AirportInfo", b =>
                {
                    b.Property<int>("airportInfoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("created");

                    b.Property<string>("infoType")
                        .HasMaxLength(255);

                    b.Property<string>("message");

                    b.Property<string>("title")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("valid_from");

                    b.Property<DateTime?>("valid_to");

                    b.HasKey("airportInfoId");

                    b.ToTable("AirportInfos");
                });

            modelBuilder.Entity("DataBase.Models.AirportInfoExternalLink", b =>
                {
                    b.Property<int>("airportInfoExternalLinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("airportInfoId");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("airportInfoExternalLinkId");

                    b.HasIndex("airportInfoId");

                    b.ToTable("AirportInfoExternalLink");
                });

            modelBuilder.Entity("DataBase.Models.AirportPostalAddress", b =>
                {
                    b.Property<int>("airportPostalAddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("country_name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("country_tag")
                        .HasMaxLength(100);

                    b.Property<string>("extended_address");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("post_office_box")
                        .HasMaxLength(50);

                    b.Property<string>("postal_code")
                        .HasMaxLength(50);

                    b.Property<string>("region")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("street_address")
                        .HasMaxLength(255);

                    b.HasKey("airportPostalAddressID");

                    b.ToTable("AirportPostalAddresses");
                });

            modelBuilder.Entity("DataBase.Models.AirportVisitorsAddress", b =>
                {
                    b.Property<int>("airportVisitorsAddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("country_name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("country_tag")
                        .HasMaxLength(100);

                    b.Property<string>("extended_address");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("post_office_box")
                        .HasMaxLength(50);

                    b.Property<string>("postal_code")
                        .HasMaxLength(50);

                    b.Property<string>("region")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("street_address")
                        .HasMaxLength(255);

                    b.HasKey("airportVisitorsAddressID");

                    b.ToTable("AirportVisitorsAddresses");
                });

            modelBuilder.Entity("DataBase.Models.AirportWebsite", b =>
                {
                    b.Property<int>("airportWebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("airportID");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("airportWebsiteId");

                    b.HasIndex("airportID");

                    b.ToTable("AirportWebsite");
                });

            modelBuilder.Entity("DataBase.Models.Arrival", b =>
                {
                    b.Property<int>("arrivalID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("actual");

                    b.Property<int?>("baggaageClaimbaggageClaimID");

                    b.Property<DateTime?>("estimated");

                    b.Property<string>("gate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("termnal")
                        .HasMaxLength(10);

                    b.Property<string>("transferInformation");

                    b.HasKey("arrivalID");

                    b.HasIndex("baggaageClaimbaggageClaimID");

                    b.ToTable("Arrivals");
                });

            modelBuilder.Entity("DataBase.Models.BaggageClaim", b =>
                {
                    b.Property<int>("baggageClaimID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("carousel")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("expectedTimeOnCarousel");

                    b.HasKey("baggageClaimID");

                    b.ToTable("BaggageClaims");
                });

            modelBuilder.Entity("DataBase.Models.BoardingTime", b =>
                {
                    b.Property<int>("boardingTimeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookingClass")
                        .HasMaxLength(255);

                    b.Property<int?>("departureID");

                    b.Property<DateTime?>("time");

                    b.HasKey("boardingTimeID");

                    b.HasIndex("departureID");

                    b.ToTable("BoardingTimes");
                });

            modelBuilder.Entity("DataBase.Models.BookService", b =>
                {
                    b.Property<int>("bookServiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("serviceHeaderID");

                    b.HasKey("bookServiceID");

                    b.HasIndex("serviceHeaderID");

                    b.ToTable("BookServices");
                });

            modelBuilder.Entity("DataBase.Models.CheckInInfo", b =>
                {
                    b.Property<int>("checkInInfoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("additionalInfo")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("checkInBeginTime");

                    b.Property<DateTime?>("checkInEndTime");

                    b.Property<string>("checkInLocation")
                        .HasMaxLength(255);

                    b.HasKey("checkInInfoID");

                    b.ToTable("CheckInInfos");
                });

            modelBuilder.Entity("DataBase.Models.Departure", b =>
                {
                    b.Property<int>("departureID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("actual");

                    b.Property<int?>("checkInInfoID");

                    b.Property<DateTime?>("estimated");

                    b.Property<string>("gate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("terminal")
                        .HasMaxLength(10);

                    b.HasKey("departureID");

                    b.HasIndex("checkInInfoID");

                    b.ToTable("Departures");
                });

            modelBuilder.Entity("DataBase.Models.FlightNumber", b =>
                {
                    b.Property<int>("flightNumberID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ACRISFlightID");

                    b.Property<string>("airlineCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("suffix")
                        .HasMaxLength(50);

                    b.Property<string>("trackNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("flightNumberID");

                    b.HasIndex("ACRISFlightID");

                    b.ToTable("FlightNumbers");
                });

            modelBuilder.Entity("DataBase.Models.Image", b =>
                {
                    b.Property<int>("imageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("high")
                        .HasMaxLength(20);

                    b.Property<string>("low")
                        .HasMaxLength(20);

                    b.Property<string>("medium")
                        .HasMaxLength(20);

                    b.Property<string>("native")
                        .HasMaxLength(20);

                    b.HasKey("imageID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataBase.Models.Logo", b =>
                {
                    b.Property<int>("logoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("logo_high")
                        .HasMaxLength(20);

                    b.Property<string>("logo_low")
                        .HasMaxLength(20);

                    b.Property<string>("logo_medium")
                        .HasMaxLength(20);

                    b.Property<string>("logo_native")
                        .HasMaxLength(20);

                    b.HasKey("logoID");

                    b.ToTable("Logo");
                });

            modelBuilder.Entity("DataBase.Models.OpeningHour", b =>
                {
                    b.Property<int>("openingHourID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("column1")
                        .IsRequired();

                    b.Property<string>("column2")
                        .IsRequired();

                    b.Property<int?>("serviceLocationsID");

                    b.HasKey("openingHourID");

                    b.HasIndex("serviceLocationsID");

                    b.ToTable("OpeningHour");
                });

            modelBuilder.Entity("DataBase.Models.OperatingAirline", b =>
                {
                    b.Property<int>("operatingAirlineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("iataCode")
                        .HasMaxLength(10);

                    b.Property<string>("icaoCode")
                        .HasMaxLength(10);

                    b.Property<string>("name")
                        .HasMaxLength(255);

                    b.HasKey("operatingAirlineID");

                    b.ToTable("OperatingAirlines");
                });

            modelBuilder.Entity("DataBase.Models.Provider", b =>
                {
                    b.Property<int>("providerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("contactproviderContactID");

                    b.Property<string>("email")
                        .HasMaxLength(100);

                    b.Property<string>("fax")
                        .HasMaxLength(100);

                    b.Property<int?>("logoID");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("phone")
                        .HasMaxLength(50);

                    b.Property<string>("website")
                        .HasMaxLength(100);

                    b.HasKey("providerID");

                    b.HasIndex("contactproviderContactID");

                    b.HasIndex("logoID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("DataBase.Models.ProviderContact", b =>
                {
                    b.Property<int>("providerContactID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("country_name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("country_tag")
                        .HasMaxLength(100);

                    b.Property<string>("extended_address");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("post_office_box")
                        .HasMaxLength(50);

                    b.Property<string>("postal_code")
                        .HasMaxLength(50);

                    b.Property<string>("region")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("street_address")
                        .HasMaxLength(255);

                    b.HasKey("providerContactID");

                    b.ToTable("ProviderContacts");
                });

            modelBuilder.Entity("DataBase.Models.Service", b =>
                {
                    b.Property<int>("serviceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("desciptionImage_verticalimageID");

                    b.Property<string>("description");

                    b.Property<int?>("descriptionImage_horizontalimageID");

                    b.Property<int?>("iconimageID");

                    b.Property<bool>("isBookable");

                    b.Property<int?>("providerID");

                    b.Property<string>("shortDescription")
                        .HasMaxLength(255);

                    b.Property<string>("subTitle")
                        .HasMaxLength(255);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("titleImage_smallimageID");

                    b.Property<int?>("titleImageimageID");

                    b.HasKey("serviceID");

                    b.HasIndex("desciptionImage_verticalimageID");

                    b.HasIndex("descriptionImage_horizontalimageID");

                    b.HasIndex("iconimageID");

                    b.HasIndex("providerID");

                    b.HasIndex("titleImage_smallimageID");

                    b.HasIndex("titleImageimageID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataBase.Models.ServiceBulletpoint", b =>
                {
                    b.Property<int>("serviceBulletpointId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("footerText")
                        .HasMaxLength(255);

                    b.Property<string>("headerText")
                        .HasMaxLength(255);

                    b.Property<int>("order");

                    b.Property<int?>("serviceID");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("serviceBulletpointId");

                    b.HasIndex("serviceID");

                    b.ToTable("ServiceBulletpoints");
                });

            modelBuilder.Entity("DataBase.Models.ServiceBulletpointElements", b =>
                {
                    b.Property<int>("serviceBulletpointElementsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("serviceBulletpointId");

                    b.Property<string>("value")
                        .IsRequired();

                    b.HasKey("serviceBulletpointElementsId");

                    b.HasIndex("serviceBulletpointId");

                    b.ToTable("ServiceBulletpointElements");
                });

            modelBuilder.Entity("DataBase.Models.ServiceDonwloads", b =>
                {
                    b.Property<int>("serviceDonwloadsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("serviceID");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("serviceDonwloadsId");

                    b.HasIndex("serviceID");

                    b.ToTable("ServiceDonwloads");
                });

            modelBuilder.Entity("DataBase.Models.ServiceHeader", b =>
                {
                    b.Property<int>("serviceHeaderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookingID");

                    b.Property<string>("description");

                    b.Property<string>("extBookingID");

                    b.Property<string>("serviceID")
                        .IsRequired();

                    b.HasKey("serviceHeaderID");

                    b.ToTable("ServiceHeaders");
                });

            modelBuilder.Entity("DataBase.Models.ServiceLocations", b =>
                {
                    b.Property<int>("serviceLocationsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("area")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("description");

                    b.Property<string>("humanReadable")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("mapImageimageID");

                    b.Property<int>("x");

                    b.Property<int>("y");

                    b.Property<int>("z");

                    b.HasKey("serviceLocationsID");

                    b.HasIndex("mapImageimageID");

                    b.ToTable("ServiceLocations");
                });

            modelBuilder.Entity("DataBase.Models.ServiceTable", b =>
                {
                    b.Property<int>("serviceTableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("footerText")
                        .HasMaxLength(255);

                    b.Property<string>("headerText")
                        .HasMaxLength(255);

                    b.Property<int>("order");

                    b.Property<string>("position")
                        .HasMaxLength(255);

                    b.Property<int?>("serviceID");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("serviceTableId");

                    b.HasIndex("serviceID");

                    b.ToTable("ServiceTables");
                });

            modelBuilder.Entity("DataBase.Models.ServiceTableRow", b =>
                {
                    b.Property<int>("serviceTableRowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("column1")
                        .IsRequired();

                    b.Property<string>("column2")
                        .IsRequired();

                    b.Property<int?>("serviceTableId");

                    b.HasKey("serviceTableRowId");

                    b.HasIndex("serviceTableId");

                    b.ToTable("ServiceTableRow");
                });

            modelBuilder.Entity("DataBase.Models.ServiceText", b =>
                {
                    b.Property<int>("serviceTextId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("order");

                    b.Property<int?>("serviceID");

                    b.Property<string>("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("serviceTextId");

                    b.HasIndex("serviceID");

                    b.ToTable("ServiceText");
                });

            modelBuilder.Entity("DataBase.Models.Specials", b =>
                {
                    b.Property<int>("specialsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("begin");

                    b.Property<string>("coupon")
                        .HasMaxLength(255);

                    b.Property<string>("description");

                    b.Property<DateTime?>("end");

                    b.Property<int?>("imageID");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("numberOfAvailable");

                    b.Property<int?>("serviceID");

                    b.HasKey("specialsID");

                    b.HasIndex("imageID");

                    b.HasIndex("serviceID");

                    b.ToTable("Specials");
                });

            modelBuilder.Entity("DataBase.Models.Trip", b =>
                {
                    b.Property<int>("tripID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("endDate");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("servicestripServicesID");

                    b.Property<DateTime>("startDate");

                    b.HasKey("tripID");

                    b.HasIndex("servicestripServicesID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("DataBase.Models.TripFlight", b =>
                {
                    b.Property<int>("tripFlightId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("flightID")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("pnr")
                        .HasMaxLength(255);

                    b.Property<int?>("tripID");

                    b.HasKey("tripFlightId");

                    b.HasIndex("tripID");

                    b.ToTable("TripFlight");
                });

            modelBuilder.Entity("DataBase.Models.TripServices", b =>
                {
                    b.Property<int>("tripServicesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookingID");

                    b.Property<string>("serviceID")
                        .IsRequired();

                    b.Property<string>("source")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("tripServicesID");

                    b.ToTable("TripServices");
                });

            modelBuilder.Entity("DataBase.Models.Via", b =>
                {
                    b.Property<int>("viaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ACRISFlightID");

                    b.Property<int?>("arrivalviaArrivalID");

                    b.Property<int?>("departureviaDepartureID");

                    b.Property<string>("viaAirport")
                        .HasMaxLength(255);

                    b.HasKey("viaID");

                    b.HasIndex("ACRISFlightID");

                    b.HasIndex("arrivalviaArrivalID");

                    b.HasIndex("departureviaDepartureID");

                    b.ToTable("Vias");
                });

            modelBuilder.Entity("DataBase.Models.ViaArrival", b =>
                {
                    b.Property<int>("viaArrivalID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("actual");

                    b.Property<int?>("baggaageClaimviaBaggageClaimID");

                    b.Property<DateTime?>("estimated");

                    b.Property<string>("gate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("termnal")
                        .HasMaxLength(10);

                    b.Property<string>("transferInformation")
                        .HasMaxLength(255);

                    b.HasKey("viaArrivalID");

                    b.HasIndex("baggaageClaimviaBaggageClaimID");

                    b.ToTable("ViaArrivals");
                });

            modelBuilder.Entity("DataBase.Models.ViaBaggageClaim", b =>
                {
                    b.Property<int>("viaBaggageClaimID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("carousel")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("expectedTimeOnCarousel");

                    b.HasKey("viaBaggageClaimID");

                    b.ToTable("ViaBaggageClaims");
                });

            modelBuilder.Entity("DataBase.Models.ViaBoardingTime", b =>
                {
                    b.Property<int>("viaBoardingTimeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bookingClass")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("time");

                    b.HasKey("viaBoardingTimeID");

                    b.ToTable("ViaBoardingTimes");
                });

            modelBuilder.Entity("DataBase.Models.ViaCheckInInfo", b =>
                {
                    b.Property<int>("viaCheckInInfoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("additionalInfo")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("checkInBeginTime");

                    b.Property<DateTime?>("checkInEndTime");

                    b.Property<string>("checkInLocation")
                        .HasMaxLength(255);

                    b.HasKey("viaCheckInInfoID");

                    b.ToTable("ViaCheckInInfos");
                });

            modelBuilder.Entity("DataBase.Models.ViaDeparture", b =>
                {
                    b.Property<int>("viaDepartureID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("actual");

                    b.Property<int?>("boardingTimeviaBoardingTimeID");

                    b.Property<int?>("checkInInfoviaCheckInInfoID");

                    b.Property<DateTime?>("estimated");

                    b.Property<string>("gate")
                        .HasMaxLength(10);

                    b.Property<DateTime>("scheduled");

                    b.Property<string>("terminal")
                        .HasMaxLength(10);

                    b.HasKey("viaDepartureID");

                    b.HasIndex("boardingTimeviaBoardingTimeID");

                    b.HasIndex("checkInInfoviaCheckInInfoID");

                    b.ToTable("ViaDepartures");
                });

            modelBuilder.Entity("DataBase.Models.ACRISFlight", b =>
                {
                    b.HasOne("DataBase.Models.AircraftType", "aircrafType")
                        .WithMany()
                        .HasForeignKey("aircrafTypeaircraftTypeID");

                    b.HasOne("DataBase.Models.Arrival", "arrival")
                        .WithMany()
                        .HasForeignKey("arrivalID");

                    b.HasOne("DataBase.Models.Departure", "departure")
                        .WithMany()
                        .HasForeignKey("departureID");

                    b.HasOne("DataBase.Models.FlightNumber", "flightNumber")
                        .WithMany()
                        .HasForeignKey("flightNumberID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataBase.Models.OperatingAirline", "operatingAirline")
                        .WithMany()
                        .HasForeignKey("operatingAirlineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataBase.Models.Airline", b =>
                {
                    b.HasOne("DataBase.Models.AirlineContact", "airlineContact")
                        .WithMany()
                        .HasForeignKey("airlineContactId");
                });

            modelBuilder.Entity("DataBase.Models.AirlineWebsite", b =>
                {
                    b.HasOne("DataBase.Models.Airline")
                        .WithMany("websites")
                        .HasForeignKey("airlineID");
                });

            modelBuilder.Entity("DataBase.Models.Airport", b =>
                {
                    b.HasOne("DataBase.Models.AirportImageURL", "airportImageURL")
                        .WithMany()
                        .HasForeignKey("airportImageURLID");

                    b.HasOne("DataBase.Models.AirportCoordinate", "coordinate")
                        .WithMany()
                        .HasForeignKey("coordinateairportCoordinateID");

                    b.HasOne("DataBase.Models.AirportCurrentQueueTimes", "currentQueueTimes")
                        .WithMany()
                        .HasForeignKey("currentQueueTimesairportCurrentQueueTimesID");

                    b.HasOne("DataBase.Models.AirportForecastQueueTimes", "forecastQueueTimes")
                        .WithMany()
                        .HasForeignKey("forecastQueueTimesairportForecastQueueTimesID");

                    b.HasOne("DataBase.Models.AirportPostalAddress", "postalAddress")
                        .WithMany()
                        .HasForeignKey("postalAddressairportPostalAddressID");

                    b.HasOne("DataBase.Models.AirportVisitorsAddress", "vasitorsAddress")
                        .WithMany()
                        .HasForeignKey("vasitorsAddressairportVisitorsAddressID");
                });

            modelBuilder.Entity("DataBase.Models.AirportInfoExternalLink", b =>
                {
                    b.HasOne("DataBase.Models.AirportInfo")
                        .WithMany("urls")
                        .HasForeignKey("airportInfoId");
                });

            modelBuilder.Entity("DataBase.Models.AirportWebsite", b =>
                {
                    b.HasOne("DataBase.Models.Airport")
                        .WithMany("websites")
                        .HasForeignKey("airportID");
                });

            modelBuilder.Entity("DataBase.Models.Arrival", b =>
                {
                    b.HasOne("DataBase.Models.BaggageClaim", "baggaageClaim")
                        .WithMany()
                        .HasForeignKey("baggaageClaimbaggageClaimID");
                });

            modelBuilder.Entity("DataBase.Models.BoardingTime", b =>
                {
                    b.HasOne("DataBase.Models.Departure")
                        .WithMany("boardingTime")
                        .HasForeignKey("departureID");
                });

            modelBuilder.Entity("DataBase.Models.BookService", b =>
                {
                    b.HasOne("DataBase.Models.ServiceHeader", "serviceHeader")
                        .WithMany()
                        .HasForeignKey("serviceHeaderID");
                });

            modelBuilder.Entity("DataBase.Models.Departure", b =>
                {
                    b.HasOne("DataBase.Models.CheckInInfo", "checkInInfo")
                        .WithMany()
                        .HasForeignKey("checkInInfoID");
                });

            modelBuilder.Entity("DataBase.Models.FlightNumber", b =>
                {
                    b.HasOne("DataBase.Models.ACRISFlight")
                        .WithMany("codeShares")
                        .HasForeignKey("ACRISFlightID");
                });

            modelBuilder.Entity("DataBase.Models.OpeningHour", b =>
                {
                    b.HasOne("DataBase.Models.ServiceLocations")
                        .WithMany("openingHours")
                        .HasForeignKey("serviceLocationsID");
                });

            modelBuilder.Entity("DataBase.Models.Provider", b =>
                {
                    b.HasOne("DataBase.Models.ProviderContact", "contact")
                        .WithMany()
                        .HasForeignKey("contactproviderContactID");

                    b.HasOne("DataBase.Models.Logo", "logo")
                        .WithMany()
                        .HasForeignKey("logoID");
                });

            modelBuilder.Entity("DataBase.Models.Service", b =>
                {
                    b.HasOne("DataBase.Models.Image", "desciptionImage_vertical")
                        .WithMany()
                        .HasForeignKey("desciptionImage_verticalimageID");

                    b.HasOne("DataBase.Models.Image", "descriptionImage_horizontal")
                        .WithMany()
                        .HasForeignKey("descriptionImage_horizontalimageID");

                    b.HasOne("DataBase.Models.Image", "icon")
                        .WithMany()
                        .HasForeignKey("iconimageID");

                    b.HasOne("DataBase.Models.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerID");

                    b.HasOne("DataBase.Models.Image", "titleImage_small")
                        .WithMany()
                        .HasForeignKey("titleImage_smallimageID");

                    b.HasOne("DataBase.Models.Image", "titleImage")
                        .WithMany()
                        .HasForeignKey("titleImageimageID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceBulletpoint", b =>
                {
                    b.HasOne("DataBase.Models.Service")
                        .WithMany("serviceBulletpoints")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceBulletpointElements", b =>
                {
                    b.HasOne("DataBase.Models.ServiceBulletpoint")
                        .WithMany("elements")
                        .HasForeignKey("serviceBulletpointId");
                });

            modelBuilder.Entity("DataBase.Models.ServiceDonwloads", b =>
                {
                    b.HasOne("DataBase.Models.Service")
                        .WithMany("downloads")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceLocations", b =>
                {
                    b.HasOne("DataBase.Models.Image", "mapImage")
                        .WithMany()
                        .HasForeignKey("mapImageimageID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceTable", b =>
                {
                    b.HasOne("DataBase.Models.Service")
                        .WithMany("serviceTables")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.ServiceTableRow", b =>
                {
                    b.HasOne("DataBase.Models.ServiceTable")
                        .WithMany("rows")
                        .HasForeignKey("serviceTableId");
                });

            modelBuilder.Entity("DataBase.Models.ServiceText", b =>
                {
                    b.HasOne("DataBase.Models.Service")
                        .WithMany("serviceTexts")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.Specials", b =>
                {
                    b.HasOne("DataBase.Models.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageID");

                    b.HasOne("DataBase.Models.Service")
                        .WithMany("specials")
                        .HasForeignKey("serviceID");
                });

            modelBuilder.Entity("DataBase.Models.Trip", b =>
                {
                    b.HasOne("DataBase.Models.TripServices", "services")
                        .WithMany()
                        .HasForeignKey("servicestripServicesID");
                });

            modelBuilder.Entity("DataBase.Models.TripFlight", b =>
                {
                    b.HasOne("DataBase.Models.Trip")
                        .WithMany("flights")
                        .HasForeignKey("tripID");
                });

            modelBuilder.Entity("DataBase.Models.Via", b =>
                {
                    b.HasOne("DataBase.Models.ACRISFlight")
                        .WithMany("via")
                        .HasForeignKey("ACRISFlightID");

                    b.HasOne("DataBase.Models.ViaArrival", "arrival")
                        .WithMany()
                        .HasForeignKey("arrivalviaArrivalID");

                    b.HasOne("DataBase.Models.ViaDeparture", "departure")
                        .WithMany()
                        .HasForeignKey("departureviaDepartureID");
                });

            modelBuilder.Entity("DataBase.Models.ViaArrival", b =>
                {
                    b.HasOne("DataBase.Models.ViaBaggageClaim", "baggaageClaim")
                        .WithMany()
                        .HasForeignKey("baggaageClaimviaBaggageClaimID");
                });

            modelBuilder.Entity("DataBase.Models.ViaDeparture", b =>
                {
                    b.HasOne("DataBase.Models.ViaBoardingTime", "boardingTime")
                        .WithMany()
                        .HasForeignKey("boardingTimeviaBoardingTimeID");

                    b.HasOne("DataBase.Models.ViaCheckInInfo", "checkInInfo")
                        .WithMany()
                        .HasForeignKey("checkInInfoviaCheckInInfoID");
                });
#pragma warning restore 612, 618
        }
    }
}
